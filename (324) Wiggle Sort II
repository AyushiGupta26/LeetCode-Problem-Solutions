  // Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]...

  void wiggleSort(vector<int>& nums) {
        int n = nums.size();
        auto mid_it = nums.begin() + n / 2;
        nth_element(nums.begin(), mid_it, nums.end());
        int middle = *mid_it;
        
        #define A(i) nums[(1 + (i) * 2) % (n | 1)]
        int i = 0, j = 0, k = n - 1;
        while (j <= k) {
            if (A(j) > middle) swap(A(i++), A(j++));
            else if (A(j) < middle) swap(A(j), A(k--));
            else ++j;               
        }
        
        // for(int i=1;i<n;i+=2){
        //     if(i-1>=0 && nums[i]<nums[i-1]){
        //         swap(nums[i],nums[i-1]);
        //     }
        //     if(i+1<n && nums[i]<nums[i+1]){
        //         swap(nums[i],nums[i+1]);
        //     }
        // }
        
        // sort(nums.begin(), nums.end());
        // for(int i=0;i<n-1;i+=2){
        //     swap(nums[i], nums[i+1]);
        // }
        
        // vector<int> v;
        // int i=0,j=n-1;
        // while(i<j){
        //     v.push_back(nums[i]);
        //     v.push_back(nums[j]);
        //     i++;
        //     j--;
        // }
        // for(int i=0;i<n;i++){
        //     nums[i] = v[i];
        // }
    }

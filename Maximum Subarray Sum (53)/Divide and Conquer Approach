  // Using DIVIDE AND CONQUER approach
  //1) Divide the given array in two halves
  //2) Return the maximum of following three
  //….a) Maximum subarray sum in left half (Make a recursive call)
  //….b) Maximum subarray sum in right half (Make a recursive call)
  //….c) Maximum subarray sum such that the subarray crosses the midpoint : 
  //    find the maximum sum starting from mid point and ending at some point on left of mid, 
  //    then find the maximum sum starting from mid + 1 and ending with sum point on right of mid + 1. 
  //    Finally, combine the two and return.
  
  int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        return helper(nums,0,n-1);
    }
    
    int helper(vector<int> &nums,int low, int high){
        if(low==high){ //base case
            return nums[low];
        }
        int mid=(low+high)/2;
        int css=crossing_sum(nums,low,mid,high);
        int lss=helper(nums,low,mid);
        int rss=helper(nums,mid+1,high);
        return max({css,lss,rss});
    }
    
    // this  is the crucial function 
    int crossing_sum(vector<int> &nums,int low,int mid,int high){
        int left=0,right=0;
        int leftmax=INT_MIN;
        int rightmax=INT_MIN;
        for(int i=mid;i>=low;i--){
            left+=nums[i];
            leftmax=max(leftmax,left);
        }
        for(int i=mid+1;i<=high;i++){
            right+=nums[i];
            rightmax=max(rightmax,right);
        }
        return (leftmax+rightmax);
    }
